// {{.Name}} - {{.Desc}}
// 
// {{.Text}}

package {{$.PackageName}}

{{template "header" $ }}

import (
//  	"fmt"
//  	"os"

//  	"github.com/go-easygen/go-flags"
)

// Template for main starts here

//  // for `go generate -x`
//  //go:generate sh {{$.ProgramName}}_cliGen.sh

//////////////////////////////////////////////////////////////////////////
// Constant and data type/structure definitions

////////////////////////////////////////////////////////////////////////////
// Global variables definitions

//  var (
//          progname  = "{{.Name}}"
//          version   = "0.1.0"
//          date = "{{ date "I" }}"

//  	// Opts store all the configurable options
//  	Opts OptsT
//  )
//  
//  var gfParser = flags.NewParser(&Opts, flags.Default)

////////////////////////////////////////////////////////////////////////////
// Function definitions

//==========================================================================
// Function main
//  func main() {
{{- if .Version }}
//  	Opts.Version = showVersion
{{- end }}
{{- if .Verbose }}
//  	Opts.Verbflg = func() {
//  		Opts.Verbose++
//  	}
{{- end }}
//  
//  	if _, err := gfParser.Parse(); err != nil {
//  		fmt.Println()
//  		gfParser.WriteHelp(os.Stdout)
//  		os.Exit(1)
//  	}
//  	fmt.Println()
//  	//Do{{clk2uc .Name}}()
//  }
//
//  //==========================================================================
//  // support functions
//  
{{- if .Version }}
//  func showVersion() {
//   	fmt.Fprintf(os.Stderr, "{{.Name}} - {{.Desc}}, version %s\n", version)
//  	fmt.Fprintf(os.Stderr, "Built on %s\n", date)
//   	fmt.Fprintf(os.Stderr, "Copyright (C) {{$.Since}}-{{ date "Y4" }}, {{or $.Authors "The Author(s) <they@their.org>"}}\n\n")
//  	fmt.Fprintf(os.Stderr, "{{.Text}}\n")
//  	os.Exit(0)
//  }
{{- end }}
// Template for main ends here

// Do{{clk2uc .Name}} implements the business logic of command `{{.Name}}`
//  func Do{{clk2uc .Name}}() error {
//  	return nil
//  }

// Template for type define starts here

{{template "type_struct" argsm "ProgramName" .ProgramName "Options" .Options "Verbose" .Verbose "Version" .Version "typeName" "OptsT" "Prefix" "" }}
// Template for type define ends here

{{range .Command}}
// Template for "{{.Name}}" CLI handling starts here
{{template "header" $ }}

//  package {{$.PackageName}}

//  import (
//  	"fmt"
//  	"os"
//
//  	"github.com/go-easygen/go-flags/clis"
//  )

// *** Sub-command: {{.Name}} ***

////////////////////////////////////////////////////////////////////////////
// Constant and data type/structure definitions

{{template "type_struct" argsm "ProgramName" $.ProgramName "Options" .Options "typeName" (print (clk2uc .Name) "Command") "Prefix" "//  " }}

//  
//  var {{clk2ls .Name}}Command {{clk2uc .Name}}Command
//  
//  ////////////////////////////////////////////////////////////////////////////
//  // Function definitions
//  
//  func init() {
//  	gfParser.AddCommand("{{.Name}}",
//  		"{{.Desc}}",
//  		"{{.Text}}",
//  		&{{clk2ls .Name}}Command)
//  }
//
//  func (x *{{clk2uc .Name}}Command) Execute(args []string) error {
//   	fmt.Fprintf(os.Stderr, "{{.Desc}}\n")
//   	// fmt.Fprintf(os.Stderr, "Copyright (C) {{$.Since}}-{{ date "Y4" }}, {{or $.Authors "The Author(s) <they@their.org>"}}\n\n")
//   	clis.Setup("{{$.Name}}::{{.Name}}", Opts.Verbose)
//   	clis.Verbose(1, "Doing {{clk2uc .Name}}, with %+v, %+v", Opts, args)
//   	{{$Opts := .Options}}// fmt.Println({{range $i, $opt := .Options}}x.{{$opt.Name}}{{if lt $i ($Opts | len | minus1)}}, {{end}}{{end}})
//  	return x.Exec(args)
//  }
//  
// // Exec implements the business logic of command `{{.Name}}`
// func (x *{{clk2uc .Name}}Command) Exec(args []string) error {
// 	// err := ...
// 	// clis.WarnOn("{{.Name}}::Exec", err)
// 	// or,
// 	// clis.AbortOn("{{.Name}}::Exec", err)
// 	return nil
// }
// Template for "{{.Name}}" CLI handling ends here
{{end}}

